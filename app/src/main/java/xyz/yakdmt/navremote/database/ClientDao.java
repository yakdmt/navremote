package xyz.yakdmt.navremote.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import xyz.yakdmt.navremote.database.Client;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT".
*/
public class ClientDao extends AbstractDao<Client, String> {

    public static final String TABLENAME = "CLIENT";

    /**
     * Properties of entity Client.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property External_name = new Property(2, String.class, "external_name", false, "EXTERNAL_NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Contact = new Property(5, String.class, "contact", false, "CONTACT");
        public final static Property Address_legal = new Property(6, String.class, "address_legal", false, "ADDRESS_LEGAL");
        public final static Property Address_actual = new Property(7, String.class, "address_actual", false, "ADDRESS_ACTUAL");
        public final static Property Extended_address = new Property(8, String.class, "extended_address", false, "EXTENDED_ADDRESS");
        public final static Property Priority_group = new Property(9, String.class, "priority_group", false, "PRIORITY_GROUP");
        public final static Property Manager = new Property(10, String.class, "manager", false, "MANAGER");
        public final static Property Inn = new Property(11, String.class, "inn", false, "INN");
        public final static Property Kpp = new Property(12, String.class, "kpp", false, "KPP");
    };


    public ClientDao(DaoConfig config) {
        super(config);
    }
    
    public ClientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"EXTERNAL_NAME\" TEXT," + // 2: external_name
                "\"EMAIL\" TEXT," + // 3: email
                "\"PHONE\" TEXT," + // 4: phone
                "\"CONTACT\" TEXT," + // 5: contact
                "\"ADDRESS_LEGAL\" TEXT," + // 6: address_legal
                "\"ADDRESS_ACTUAL\" TEXT," + // 7: address_actual
                "\"EXTENDED_ADDRESS\" TEXT," + // 8: extended_address
                "\"PRIORITY_GROUP\" TEXT," + // 9: priority_group
                "\"MANAGER\" TEXT," + // 10: manager
                "\"INN\" TEXT," + // 11: inn
                "\"KPP\" TEXT);"); // 12: kpp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Client entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String external_name = entity.getExternal_name();
        if (external_name != null) {
            stmt.bindString(3, external_name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(6, contact);
        }
 
        String address_legal = entity.getAddress_legal();
        if (address_legal != null) {
            stmt.bindString(7, address_legal);
        }
 
        String address_actual = entity.getAddress_actual();
        if (address_actual != null) {
            stmt.bindString(8, address_actual);
        }
 
        String extended_address = entity.getExtended_address();
        if (extended_address != null) {
            stmt.bindString(9, extended_address);
        }
 
        String priority_group = entity.getPriority_group();
        if (priority_group != null) {
            stmt.bindString(10, priority_group);
        }
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(11, manager);
        }
 
        String inn = entity.getInn();
        if (inn != null) {
            stmt.bindString(12, inn);
        }
 
        String kpp = entity.getKpp();
        if (kpp != null) {
            stmt.bindString(13, kpp);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Client readEntity(Cursor cursor, int offset) {
        Client entity = new Client( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // external_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address_legal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address_actual
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // extended_address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // priority_group
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // manager
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // inn
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // kpp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Client entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExternal_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress_legal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress_actual(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExtended_address(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPriority_group(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setManager(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInn(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setKpp(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Client entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Client entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
